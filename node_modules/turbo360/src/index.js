var superagent = require('superagent')
var Promise = require('bluebird')
var StripeUtils = require('./utils/StripeUtils')
var Auth = require('./utils/Auth')
var IndexDB = require('./utils/IndexDB')

var Microservice = function(credentials){
	const BASE_URL = 'https://velocity-microservices.herokuapp.com'

	var config = {
		site_id: credentials['site_id'],
		base_url: BASE_URL
	}

	var fetch = function(resource, params){
		if (params == null)
			params = {}

		params['site'] = config.site_id
		return new Promise(function(resolve, reject){
			if (params.site == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (params.site.length == 0){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			superagent
			.get(BASE_URL+'/api/'+resource.toLowerCase())
			.query(params)
			.set('Accept', 'application/json')
			.end(function(err, response){
				if (err){
					reject(err)
					return
				}

				if (response.body.confirmation == 'fail'){
					reject(new Error(response.body.message))
					return
				}

				var payload = response.body.results
				resolve(payload)
			})
		})
	}

	var fetchOne = function(resource, id){
		return new Promise(function(resolve, reject){
			if (config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			superagent
			.get(BASE_URL+'/api/'+resource.toLowerCase()+'/'+id)
			.query(null)
			.set('Accept', 'application/json')
			.end(function(err, response){
				if (err){
					reject(err)
					return
				}

				if (response.body.confirmation == 'fail'){
					reject(new Error(response.body.message))
					return
				}

				var payload = response.body.result
				resolve(payload)
			})
		})		
	}

	var create = function(resource, params){
		return new Promise(function(resolve, reject){
			if (config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (params == null){
				reject(new Error('Post parameters required.'))
				return
			}

			params['site'] = config.site_id
			superagent
			.post(BASE_URL+'/api/'+resource.toLowerCase())
			.send(params)
			.set('Accept', 'application/json')
			.end(function(err, response){
				if (err){
					reject(err)
					return
				}

				if (response.body.confirmation == 'fail'){
					reject(new Error(response.body.message))
					return
				}

				// console.log('SEND MICROSERVICE: '+JSON.stringify(response))
				var payload = response.body.result || response.body.results
				resolve(payload)
			})
		})
	}

	var update = function(resource, entity, params){
		return new Promise(function(resolve, reject){
			if (config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (params == null){
				reject(new Error('Post parameters required.'))
				return
			}

			// update the entity itself with new values then send to microservice
			Object.keys(params).forEach(function(key, i){
				var value = params[key]
				entity[key] = value
			})

			superagent
			.put(BASE_URL+'/api/'+resource.toLowerCase()+'/'+entity.id)
			.send(entity)
			.set('Accept', 'application/json')
			.end(function(err, response){
				if (err){
					reject(err)
					return
				}

				if (response.body.confirmation == 'fail'){
					reject(new Error(response.body.message))
					return
				}

				var payload = response.body.result || response.body.results
				resolve(payload)
			})
		})
	}

	var remove = function(resource, entity){
		return new Promise(function(resolve, reject){
			if (config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			superagent
			.delete(BASE_URL+'/api/'+resource+'/'+entity.id)
			// .send(entity)
			.set('Accept', 'application/json')
			.end(function(err, response){
				if (err){
					reject(err)
					return
				}

				if (response.body.confirmation == 'fail'){
					reject(new Error(response.body.message))
					return
				}

				// var payload = response.body.result || response.body.results
				var payload = response.body.result || response.body.results
				resolve(payload)
			})
		})
	}

	var sendEmail = function(params){ // REQUIRED PARAMS: content, fromemail, fromename, reqcipient, subject
		return new Promise(function(resolve, reject){
			if (config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}
			
			if (params == null){
				reject(new Error('Post parameters required.'))
				return
			}

			params['site'] = config.site_id

			superagent
			.post(BASE_URL+'/email/send')
			.send(params)
			.set('Accept', 'application/json')
			.end(function(err, response){
				if (err){
					reject(err)
					return
				}

				if (response.body.confirmation == 'fail'){
					reject(new Error(response.body.message))
					return
				}

				resolve(response.body.result)
			})
		})
	}

	var stripeMgr = StripeUtils()
	var auth = Auth(config)

	var client = {
		fetch: fetch,
		fetchOne: fetchOne,
		create: create,
		update: update,
		remove: remove,
		sendEmail: sendEmail,
		login: auth.login,
		currentUser: auth.currentUser,
		createStripeCharge: stripeMgr.createStripeCharge,
		createStripeAccount: stripeMgr.createStripeAccount,
		recurringCharge: stripeMgr.recurringCharge
	}

	return client
}

module.exports = Microservice
